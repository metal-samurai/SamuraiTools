<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SamuraiTools.OpenXml</name>
    </assembly>
    <members>
        <member name="M:SamuraiTools.OpenXml.OpenXmlUtility.GetNodeIndex``2(``0,``1)">
            <summary>
            Get index of node within the specified parent node by comparing its XML to the current child nodes within parent. If the node isn't found it will be created.
            </summary>
            <typeparam name="T">OpenXmlElement</typeparam>
            <typeparam name="TParent">OpenXmlElement</typeparam>
            <param name="node"></param>
            <param name="parentNode"></param>
            <returns>The index of the node within its parent.</returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.OpenXmlUtility.ConvertColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert separate ARGB integer values into a hex binary string used for formatting.
            </summary>
            <param name="alpha"></param>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.OpenXmlUtility.ConvertColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Convert separate RGB integer values into a hex binary string used for formatting.
            </summary>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <returns></returns>
            <remarks>Alpha will be set to 255.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetUtility.GetColumnLetter(System.UInt32)">
            <summary>
            Convert a column index number to its corresponding letter definition.
            </summary>
            <param name="columnNumber"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetUtility.GetColumnLetter(System.String)">
            <summary>
            Extract the column letter from a cell reference.
            </summary>
            <param name="cellReference"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetUtility.GetRowIndex(System.String)">
            <summary>
            Extract the row index number from a cell reference.
            </summary>
            <param name="cellReference"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.AddCellStyle(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,SamuraiTools.OpenXml.Spreadsheet.BuiltinCellStyle)">
            <summary>
            Add a builtin cell style to a document's stylesheet.
            </summary>
            <param name="style">From the Open XML built-in cell style definitions</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.ApplyCellStyle(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.Spreadsheet.CellFormat,SamuraiTools.OpenXml.Spreadsheet.BuiltinCellStyle)">
            <summary>
            Apply builtin cell style to an existing CellFormat.
            </summary>
            <param name="document"></param>
            <param name="cellFormat"></param>
            <param name="style"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.AddNewStylesheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Create and add a WorkbookStylesPart and Stylesheet with the minimum components for CellFormats to function, including a starting Font object for Calibri 11.
            </summary>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.AddNewStylesheet(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.OpenXmlElement[])">
            <summary>
            Create and add a WorkbookStylesPart and Stylesheet with the minimum components for CellFormats to function.
            </summary>
            <param name="document"></param>
            <param name="elements">Additional elements of type Font, Fill, or Border to include in the Stylesheet.</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.CreateStyleElementTemplate``1(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,DocumentFormat.OpenXml.UInt32Value)">
            <summary>
            Create a new style element based on the given StyleIndex. If that index is null, create a new basic element appropriate for the type, using the document's Normal style.
            </summary>
            <typeparam name="T">OpenXmlElement</typeparam>
            <param name="document"></param>
            <param name="styleIndex">The index pointing to a CellFormat to use as a template if not null.</param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.PrepNewDocument(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Add the minimum required components for a new document to be useable. A document must have a Workbook with at least one Worksheet.
            </summary>
            <param name="document">A blank document.</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.RemoveSharedStringItem(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.UInt32)">
            <summary>
            Given a shared string ID and a SpreadsheetDocument, verifies that other cells in the document no longer 
            reference the specified SharedStringItem and removes the item.
            </summary>
            <param name="shareStringId">ID of shared string to check</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.Worksheets(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument)">
            <summary>
            Get the collection of Worksheet objects for this document.
            </summary>
            <param name="document"></param>
            <returns>A new WorksheetCollection object.</returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.Worksheets(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.String)">
            <summary>
            Get the Worksheet with the given name.
            </summary>
            <param name="document"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.SpreadsheetDocumentExtension.Worksheets(DocumentFormat.OpenXml.Packaging.SpreadsheetDocument,System.Int32)">
            <summary>
            Get the worksheet at the given index.
            </summary>
            <param name="document"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.Columns(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Get the Columns element of the worksheet.
            </summary>
            <param name="worksheet"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.Columns(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32,System.UInt32)">
            <summary>
            Get the Column element with the given minimum and maximum index.
            </summary>
            <param name="worksheet"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.Columns(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32)">
            <summary>
            Get the Column element with the given index as minimum and maximum index.
            </summary>
            <param name="worksheet"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.ColumnRange(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32)">
            <summary>
            Get a Range representing the column at the given index.
            </summary>
            <param name="worksheet"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.Rows(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32)">
            <summary>
            Find Row at the given index on this Worksheet.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.RowRange(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32)">
            <summary>
            Get a Range representing the row at the given index.
            </summary>
            <param name="worksheet"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.Cells(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32,System.UInt32)">
            <summary>
            Get the Cell at the given row and column index.
            </summary>
            <param name="worksheet"></param>
            <param name="rowIndex"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.CellRange(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Get a Range for all cells on this Worksheet between the starting point and the number of rows and columns.
            </summary>
            <param name="worksheet"></param>
            <param name="startRow"></param>
            <param name="startColumn"></param>
            <param name="rowCount"></param>
            <param name="columnCount"></param>
            <returns>A new Range object.</returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.CellRange(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32,System.UInt32)">
            <summary>
            Get a Range for the cell on this Worksheet at the given row and column index.
            </summary>
            <param name="worksheet"></param>
            <param name="startRow"></param>
            <param name="startColumn"></param>
            <returns>A new Range object.</returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.Name(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Get the name of this Worksheet.
            </summary>
            <param name="worksheet"></param>
            <returns>The display name for the Worksheet when the document is opened.</returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.Name(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Change the name for this Worksheet.
            </summary>
            <param name="worksheet"></param>
            <param name="newName"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.AddHyperlink(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.UInt32,System.UInt32,System.String,System.UInt32,System.UInt32,System.Boolean)">
            <summary>
            Add a Hyperlink to the reference cell which points to the target cell.
            </summary>
            <param name="worksheet"></param>
            <param name="referenceRow"></param>
            <param name="referenceColumn"></param>
            <param name="targetWorksheetName"></param>
            <param name="targetRow"></param>
            <param name="targetColumn"></param>
            <param name="formatCell">Whether to apply hyperlink styling to the reference cell.</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetExtension.AddImage(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            Add and image to this Worksheet.
            </summary>
            <param name="worksheet"></param>
            <param name="imagePath">Full path to the image file.</param>
            <param name="imgDesc">Description of the image.</param>
            <param name="rowIndex">Row of the cell at which to place the image.</param>
            <param name="colIndex">Column of the cell at which to place the image.</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.RowExtension.Cells(DocumentFormat.OpenXml.Spreadsheet.Row,System.UInt32)">
            <summary>
            Get the Cell in this Row at the given column index.
            </summary>
            <param name="row"></param>
            <param name="columnIndex"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.RowExtension.ApplyCellStyle(DocumentFormat.OpenXml.Spreadsheet.Row,SamuraiTools.OpenXml.Spreadsheet.BuiltinCellStyle)">
            <summary>
            Apply a builtin cell style to this Row and its cells. The necessary CellStyle will be created if it doesn't yet exist in the StyleSheet.
            </summary>
            <param name="row"></param>
            <param name="style"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.ColumnExtension.AutoFit(DocumentFormat.OpenXml.Spreadsheet.Column)">
            <summary>
            Set the width of a column to display the longest text contained in any of its cells.
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.ColumnExtension.ApplyCellStyle(DocumentFormat.OpenXml.Spreadsheet.Column,SamuraiTools.OpenXml.Spreadsheet.BuiltinCellStyle)">
            <summary>
            Apply a builtin cell style to this Column and its cells. The necessary CellStyle will be created if it doesn't yet exist in the StyleSheet.
            </summary>
            <param name="column"></param>
            <param name="style"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.CellExtension.ApplyCellFormat(DocumentFormat.OpenXml.Spreadsheet.Cell,DocumentFormat.OpenXml.Spreadsheet.CellFormat)">
            <summary>
            Apply the StyleIndex corresponding to the given CellFormat to this Cell. The CellFormat will be created if it doesn't yet exist in the StyleSheet.
            </summary>
            <param name="cell"></param>
            <param name="cellFormat"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.CellExtension.ApplyCellStyle(DocumentFormat.OpenXml.Spreadsheet.Cell,SamuraiTools.OpenXml.Spreadsheet.BuiltinCellStyle)">
            <summary>
            Apply a builtin cell style to this Cell. The necessary CellStyle will be created if it doesn't yet exist in the StyleSheet.
            </summary>
            <param name="cell"></param>
            <param name="style"></param>
        </member>
        <member name="T:SamuraiTools.OpenXml.Spreadsheet.Range">
            <summary>
            Collection representing a consecutive list of cells, a row, or a column.
            </summary>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.PrepRangeElements">
            <summary>
            Fill internal list of cells, row, and column in preparation for manipulating them in some way.
            Elements should not be written to the document unecessarily, so wait to call this until actually doing something with the Range.
            </summary>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.MergeCells(System.Boolean)">
            <summary>
            Merge the cells in this Range, optionally centering them. Only applicable to Cell ranges.
            </summary>
            <param name="center">Set the horizontal alignment to center after merging.</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.AutoFit">
            <summary>
            Auto fit width of column in the range. Not applicable to other range types.
            </summary>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.ApplyCellStyle(SamuraiTools.OpenXml.Spreadsheet.BuiltinCellStyle)">
            <summary>
            Apply a builtin cell style to the cells in this Range. The necessary CellStyle will be created if it doesn't yet exist in the StyleSheet.
            </summary>
            <param name="style"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.ApplyStyle``1(System.Action{``0})">
            <summary>
            Apply a style index to each element in the range.
            </summary>
            <param name="ModifyElement">The function to modify a template of the style element being changed (e.g. Font) if the range element's current style index is not shared with any previous element in the range.</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.CreateStyleElement(System.Nullable{System.UInt32},DocumentFormat.OpenXml.Spreadsheet.CellFormat,System.Action{DocumentFormat.OpenXml.Spreadsheet.Font})">
            <summary>
            For use by ApplyStyle to create a template of a style element.
            </summary>
            <param name="styleIndex"></param>
            <param name="formatTemplate"></param>
            <param name="ModifyElement"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetFont(System.String,System.Nullable{System.Double},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String)">
            <summary>
            Set many common characteristics of font.
            </summary>
            <param name="name">Font family name.</param>
            <param name="size">Font size in points</param>
            <param name="bold"></param>
            <param name="underline"></param>
            <param name="italic"></param>
            <param name="strikethrough"></param>
            <param name="color">Hex binary 32-bit color value.</param>
            <remarks>Any part can be null to leave it unchanged.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetGradientFill(SamuraiTools.OpenXml.Spreadsheet.GradientFillType,System.String,System.String)">
            <summary>
            Set Gradient fill for the elements in this Range.
            </summary>
            <param name="gradientFillType"></param>
            <param name="color1">Beginning color of the gradient transition.</param>
            <param name="color2">Ending color of the gradient transition.</param>
            <remarks>Any existing fill for these elements will be replaced.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetPatternFill(DocumentFormat.OpenXml.Spreadsheet.PatternValues,System.String,System.String)">
            <summary>
            Set Pattern fill for the elements in this Range.
            </summary>
            <param name="patternType"></param>
            <param name="foregroundColor"></param>
            <param name="backgroundColor"></param>
            <remarks>Any existing fill for these elements will be replaced. Foreground and background color are not both required, so either can be null or empty to avoid setting one.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetBorder(System.Nullable{DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues},System.String,System.Nullable{DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues},System.String,System.Nullable{DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues},System.String,System.Nullable{DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues},System.String,System.Nullable{DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Set border styling and color for the elements in this Range.
            </summary>
            <param name="leftBorderStyle"></param>
            <param name="leftBorderColor"></param>
            <param name="rightBorderStyle"></param>
            <param name="rightBorderColor"></param>
            <param name="topBorderStyle"></param>
            <param name="topBorderColor"></param>
            <param name="bottomBorderStyle"></param>
            <param name="bottomBorderColor"></param>
            <param name="diagonalBorderStyle"></param>
            <param name="diagonalBorderColor"></param>
            <remarks>Colors are in hex binary 32-bit format. Any part can remain null to leave it unchanged.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetOutlineBorder(System.Nullable{DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues},System.String,System.Nullable{DocumentFormat.OpenXml.Spreadsheet.BorderStyleValues},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
            Set top, left, right, and bottom borders to the same style and/or color with optional diagonal border specified separately.
            </summary>
            <param name="outlineBorderStyle">Border style for top, left, right, and bottom borders.</param>
            <param name="outlineBorderColor">Color for top, left, right, and bottom borders.</param>
            <param name="diagonalBorderStyle"></param>
            <param name="diagonalBorderColor"></param>
            <param name="diagonalUp"></param>
            <param name="diagonalDown"></param>
            <remarks>Colors are in hex binary 32-bit format. Any part can remain null to leave it unchanged.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetAlignment(System.Nullable{DocumentFormat.OpenXml.Spreadsheet.HorizontalAlignmentValues},System.Nullable{DocumentFormat.OpenXml.Spreadsheet.VerticalAlignmentValues},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
            Set alignment for elements in this range.
            </summary>
            <param name="horizontalAlignment"></param>
            <param name="verticalAlignment"></param>
            <param name="indent"></param>
            <param name="wrap"></param>
            <remarks> Any part can remain null to leave it unchanged.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetValues(System.Object)">
            <summary>
            Set values for the cells in this Range. All cells will contain the provided value.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetValues(System.Object[])">
            <summary>
            Set values for the cells in this Range. The provided values will be repeated for each row or column of cells.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.Range.SetValues(System.Object[0:,0:])">
            <summary>
            Set values for the cells in this Range.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.Add(DocumentFormat.OpenXml.Spreadsheet.Worksheet,System.String)">
            <summary>
            Add this Worksheet to the collection with the provided name.
            </summary>
            <param name="item">The Worksheet to add.</param>
            <param name="name">The name for this Worksheet.</param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.Add(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Add this Worksheet to the collection. The name will be generated automatically.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.AddNew(System.String)">
            <summary>
            Add a new Worksheet with empty SheetData to the collection with the provided name.
            </summary>
            <param name="name">The name for the new Worksheet.</param>
            <returns></returns>
            <remarks>Name can be null or empty, in which case a name will be generated automatically.</remarks>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.Clear">
            <summary>
            Clear all Worksheets from the collection.
            </summary>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.Contains(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Whether the provided Worksheet is in the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.Contains(System.String)">
            <summary>
            Whether a Worksheet with the provided name is in the collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.CopyTo(DocumentFormat.OpenXml.Spreadsheet.Worksheet[],System.Int32)">
            <summary>
            Copy the Worksheets in the collection to an array, starting at the provided index.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.Remove(System.String)">
            <summary>
            Remove the Worksheet with the provided name from the collection.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:SamuraiTools.OpenXml.Spreadsheet.WorksheetCollection.Remove(DocumentFormat.OpenXml.Spreadsheet.Worksheet)">
            <summary>
            Remove the provided Worksheet from the collection.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
    </members>
</doc>
